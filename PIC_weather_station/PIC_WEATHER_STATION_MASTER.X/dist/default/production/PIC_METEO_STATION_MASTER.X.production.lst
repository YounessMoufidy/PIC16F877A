

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sun May 26 11:16:52 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,delta=2
    10                           	psect	text4,local,class=CODE,merge=1,delta=2
    11                           	psect	text5,local,class=CODE,merge=1,delta=2
    12                           	psect	text6,local,class=CODE,merge=1,delta=2
    13                           	psect	text7,local,class=CODE,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 22/03/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F877A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0000                     	;# 
    52     0001                     	;# 
    53     0002                     	;# 
    54     0003                     	;# 
    55     0004                     	;# 
    56     0005                     	;# 
    57     0006                     	;# 
    58     0007                     	;# 
    59     0008                     	;# 
    60     0009                     	;# 
    61     000A                     	;# 
    62     000B                     	;# 
    63     000C                     	;# 
    64     000D                     	;# 
    65     000E                     	;# 
    66     000E                     	;# 
    67     000F                     	;# 
    68     0010                     	;# 
    69     0011                     	;# 
    70     0012                     	;# 
    71     0013                     	;# 
    72     0014                     	;# 
    73     0015                     	;# 
    74     0015                     	;# 
    75     0016                     	;# 
    76     0017                     	;# 
    77     0018                     	;# 
    78     0019                     	;# 
    79     001A                     	;# 
    80     001B                     	;# 
    81     001B                     	;# 
    82     001C                     	;# 
    83     001D                     	;# 
    84     001E                     	;# 
    85     001F                     	;# 
    86     0081                     	;# 
    87     0085                     	;# 
    88     0086                     	;# 
    89     0087                     	;# 
    90     0088                     	;# 
    91     0089                     	;# 
    92     008C                     	;# 
    93     008D                     	;# 
    94     008E                     	;# 
    95     0091                     	;# 
    96     0092                     	;# 
    97     0093                     	;# 
    98     0094                     	;# 
    99     0098                     	;# 
   100     0099                     	;# 
   101     009C                     	;# 
   102     009D                     	;# 
   103     009E                     	;# 
   104     009F                     	;# 
   105     010C                     	;# 
   106     010D                     	;# 
   107     010E                     	;# 
   108     010F                     	;# 
   109     018C                     	;# 
   110     018D                     	;# 
   111     0000                     	;# 
   112     0001                     	;# 
   113     0002                     	;# 
   114     0003                     	;# 
   115     0004                     	;# 
   116     0005                     	;# 
   117     0006                     	;# 
   118     0007                     	;# 
   119     0008                     	;# 
   120     0009                     	;# 
   121     000A                     	;# 
   122     000B                     	;# 
   123     000C                     	;# 
   124     000D                     	;# 
   125     000E                     	;# 
   126     000E                     	;# 
   127     000F                     	;# 
   128     0010                     	;# 
   129     0011                     	;# 
   130     0012                     	;# 
   131     0013                     	;# 
   132     0014                     	;# 
   133     0015                     	;# 
   134     0015                     	;# 
   135     0016                     	;# 
   136     0017                     	;# 
   137     0018                     	;# 
   138     0019                     	;# 
   139     001A                     	;# 
   140     001B                     	;# 
   141     001B                     	;# 
   142     001C                     	;# 
   143     001D                     	;# 
   144     001E                     	;# 
   145     001F                     	;# 
   146     0081                     	;# 
   147     0085                     	;# 
   148     0086                     	;# 
   149     0087                     	;# 
   150     0088                     	;# 
   151     0089                     	;# 
   152     008C                     	;# 
   153     008D                     	;# 
   154     008E                     	;# 
   155     0091                     	;# 
   156     0092                     	;# 
   157     0093                     	;# 
   158     0094                     	;# 
   159     0098                     	;# 
   160     0099                     	;# 
   161     009C                     	;# 
   162     009D                     	;# 
   163     009E                     	;# 
   164     009F                     	;# 
   165     010C                     	;# 
   166     010D                     	;# 
   167     010E                     	;# 
   168     010F                     	;# 
   169     018C                     	;# 
   170     018D                     	;# 
   171     0013                     _SSPBUF	set	19
   172     0014                     _SSPCON	set	20
   173     0006                     _PORTB	set	6
   174     0008                     _PORTD	set	8
   175     0043                     _RD3	set	67
   176     0091                     _SSPCON2bits	set	145
   177     0093                     _SSPADD	set	147
   178     0094                     _SSPSTAT	set	148
   179     0091                     _SSPCON2	set	145
   180     0088                     _TRISD	set	136
   181     0086                     _TRISB	set	134
   182     048E                     _ACKSTAT	set	1166
   183     043C                     _TRISC4	set	1084
   184     043B                     _TRISC3	set	1083
   185                           
   186                           	psect	cinit
   187     07FC                     start_initialization:	
   188                           ; #config settings
   189                           
   190     07FC                     __initialization:
   191     07FC                     end_of_initialization:	
   192                           ;End of C runtime variable initialization code
   193                           
   194     07FC                     __end_of__initialization:
   195     07FC  0183               	clrf	3
   196     07FD  120A  118A  2FC3   	ljmp	_main	;jump to C main() function
   197                           
   198                           	psect	cstackCOMMON
   199     0070                     __pcstackCOMMON:
   200     0070                     ?_I2C_Master_Init:
   201     0070                     ??_I2C_Master_Init:	
   202                           ; 1 bytes @ 0x0
   203                           
   204     0070                     ?_I2C_Start:	
   205                           ; 1 bytes @ 0x0
   206                           
   207     0070                     ??_I2C_Start:	
   208                           ; 1 bytes @ 0x0
   209                           
   210     0070                     ?_I2C_Write:	
   211                           ; 1 bytes @ 0x0
   212                           
   213     0070                     ??_I2C_Write:	
   214                           ; 1 bytes @ 0x0
   215                           
   216     0070                     ?_I2C_Read:	
   217                           ; 1 bytes @ 0x0
   218                           
   219     0070                     ??_I2C_Read:	
   220                           ; 1 bytes @ 0x0
   221                           
   222     0070                     ?_I2C_Stop:	
   223                           ; 1 bytes @ 0x0
   224                           
   225     0070                     ??_I2C_Stop:	
   226                           ; 1 bytes @ 0x0
   227                           
   228     0070                     ?_main:	
   229                           ; 1 bytes @ 0x0
   230                           
   231     0070                     ?_I2C_Wait:	
   232                           ; 1 bytes @ 0x0
   233                           
   234     0070                     ??_I2C_Wait:	
   235                           ; 1 bytes @ 0x0
   236                           
   237     0070                     ?_I2C_NACK:	
   238                           ; 1 bytes @ 0x0
   239                           
   240     0070                     ??_I2C_NACK:	
   241                           ; 1 bytes @ 0x0
   242                           
   243     0070                     I2C_Write@Data:	
   244                           ; 1 bytes @ 0x0
   245                           
   246     0070                     I2C_Read@Data:	
   247                           ; 1 bytes @ 0x0
   248                           
   249                           
   250                           ; 1 bytes @ 0x0
   251     0070                     	ds	1
   252     0071                     ??_main:
   253                           
   254                           ; 1 bytes @ 0x1
   255     0071                     	ds	3
   256                           
   257                           	psect	maintext
   258     07C3                     __pmaintext:	
   259 ;;
   260 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   261 ;;
   262 ;; *************** function _main *****************
   263 ;; Defined at:
   264 ;;		line 17 in file "main.c"
   265 ;; Parameters:    Size  Location     Type
   266 ;;		None
   267 ;; Auto vars:     Size  Location     Type
   268 ;;		None
   269 ;; Return value:  Size  Location     Type
   270 ;;                  1    wreg      void 
   271 ;; Registers used:
   272 ;;		wreg, status,2, status,0, pclath, cstack
   273 ;; Tracked objects:
   274 ;;		On entry : B00/0
   275 ;;		On exit  : 0/0
   276 ;;		Unchanged: 0/0
   277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   278 ;;      Params:         0       0       0       0       0
   279 ;;      Locals:         0       0       0       0       0
   280 ;;      Temps:          3       0       0       0       0
   281 ;;      Totals:         3       0       0       0       0
   282 ;;Total ram usage:        3 bytes
   283 ;; Hardware stack levels required when called: 3
   284 ;; This function calls:
   285 ;;		_I2C_Master_Init
   286 ;;		_I2C_Read
   287 ;;		_I2C_Start
   288 ;;		_I2C_Stop
   289 ;;		_I2C_Write
   290 ;; This function is called by:
   291 ;;		Startup code after reset
   292 ;; This function uses a non-reentrant model
   293 ;;
   294                           
   295     07C3                     _main:	
   296                           ;psect for function _main
   297                           
   298     07C3                     l666:	
   299                           ;incstack = 0
   300                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   301                           
   302                           
   303                           ;main.c: 19:   TRISB = 0x00;
   304     07C3  1683               	bsf	3,5	;RP0=1, select bank1
   305     07C4  1303               	bcf	3,6	;RP1=0, select bank1
   306     07C5  0186               	clrf	6	;volatile
   307                           
   308                           ;main.c: 20:   TRISD = 0x00;
   309     07C6  0188               	clrf	8	;volatile
   310                           
   311                           ;main.c: 21:   PORTD = 0x00;
   312     07C7  1283               	bcf	3,5	;RP0=0, select bank0
   313     07C8  1303               	bcf	3,6	;RP1=0, select bank0
   314     07C9  0188               	clrf	8	;volatile
   315     07CA                     l668:
   316                           
   317                           ;main.c: 22:   I2C_Master_Init();
   318     07CA  120A  118A  2791  120A  118A  	fcall	_I2C_Master_Init
   319     07CF                     l670:
   320                           
   321                           ;main.c: 24:   {;main.c: 25:     I2C_Start();
   322     07CF  120A  118A  2775  120A  118A  	fcall	_I2C_Start
   323     07D4                     l672:
   324                           
   325                           ;main.c: 27:     I2C_Write(0x41);
   326     07D4  3041               	movlw	65
   327     07D5  120A  118A  276F  120A  118A  	fcall	_I2C_Write
   328     07DA                     l674:
   329                           
   330                           ;main.c: 29:     PORTB=I2C_Read();
   331     07DA  120A  118A  27AB  120A  118A  	fcall	_I2C_Read
   332     07DF  1283               	bcf	3,5	;RP0=0, select bank0
   333     07E0  1303               	bcf	3,6	;RP1=0, select bank0
   334     07E1  0086               	movwf	6	;volatile
   335     07E2                     l676:
   336                           
   337                           ;main.c: 31:     I2C_Stop();
   338     07E2  120A  118A  277E  120A  118A  	fcall	_I2C_Stop
   339     07E7                     l678:
   340                           
   341                           ;main.c: 32:     _delay((unsigned long)((500)*(4000000/4000.0)));
   342     07E7  3003               	movlw	3
   343     07E8  00F3               	movwf	??_main+2
   344     07E9  308A               	movlw	138
   345     07EA  00F2               	movwf	??_main+1
   346     07EB  3055               	movlw	85
   347     07EC  00F1               	movwf	??_main
   348     07ED                     u37:
   349     07ED  0BF1               	decfsz	??_main,f
   350     07EE  2FED               	goto	u37
   351     07EF  0BF2               	decfsz	??_main+1,f
   352     07F0  2FED               	goto	u37
   353     07F1  0BF3               	decfsz	??_main+2,f
   354     07F2  2FED               	goto	u37
   355     07F3  2FF4               	nop2
   356     07F4                     l680:
   357                           
   358                           ;main.c: 33:     RD3 = ~RD3;
   359     07F4  3008               	movlw	8
   360     07F5  1283               	bcf	3,5	;RP0=0, select bank0
   361     07F6  1303               	bcf	3,6	;RP1=0, select bank0
   362     07F7  0688               	xorwf	8,f
   363     07F8  2FCF               	goto	l670
   364     07F9  120A  118A  2800   	ljmp	start
   365     07FC                     __end_of_main:
   366                           
   367                           	psect	text1
   368     076F                     __ptext1:	
   369 ;; *************** function _I2C_Write *****************
   370 ;; Defined at:
   371 ;;		line 83 in file "main.c"
   372 ;; Parameters:    Size  Location     Type
   373 ;;  Data            1    wreg     unsigned char 
   374 ;; Auto vars:     Size  Location     Type
   375 ;;  Data            1    0[COMMON] unsigned char 
   376 ;; Return value:  Size  Location     Type
   377 ;;                  1    wreg      unsigned char 
   378 ;; Registers used:
   379 ;;		wreg
   380 ;; Tracked objects:
   381 ;;		On entry : 0/0
   382 ;;		On exit  : 0/0
   383 ;;		Unchanged: 0/0
   384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   385 ;;      Params:         0       0       0       0       0
   386 ;;      Locals:         1       0       0       0       0
   387 ;;      Temps:          0       0       0       0       0
   388 ;;      Totals:         1       0       0       0       0
   389 ;;Total ram usage:        1 bytes
   390 ;; Hardware stack levels used: 1
   391 ;; This function calls:
   392 ;;		Nothing
   393 ;; This function is called by:
   394 ;;		_main
   395 ;; This function uses a non-reentrant model
   396 ;;
   397                           
   398     076F                     _I2C_Write:	
   399                           ;psect for function _I2C_Write
   400                           
   401                           
   402                           ;incstack = 0
   403                           ; Regs used in _I2C_Write: [wreg]
   404                           ;I2C_Write@Data stored from wreg
   405     076F  00F0               	movwf	I2C_Write@Data
   406     0770                     l646:
   407                           
   408                           ;main.c: 83: unsigned char I2C_Write(unsigned char Data);main.c: 84: {;main.c: 87:   SSP
      +                          BUF = Data;
   409     0770  0870               	movf	I2C_Write@Data,w
   410     0771  1283               	bcf	3,5	;RP0=0, select bank0
   411     0772  1303               	bcf	3,6	;RP1=0, select bank0
   412     0773  0093               	movwf	19	;volatile
   413     0774                     l648:
   414     0774                     l75:	
   415                           ;main.c: 89:   return ACKSTAT;;	Return value of _I2C_Write is never used
   416                           
   417     0774  0008               	return
   418     0775                     __end_of_I2C_Write:
   419                           
   420                           	psect	text2
   421     077E                     __ptext2:	
   422 ;; *************** function _I2C_Stop *****************
   423 ;; Defined at:
   424 ;;		line 57 in file "main.c"
   425 ;; Parameters:    Size  Location     Type
   426 ;;		None
   427 ;; Auto vars:     Size  Location     Type
   428 ;;		None
   429 ;; Return value:  Size  Location     Type
   430 ;;                  1    wreg      void 
   431 ;; Registers used:
   432 ;;		wreg, status,2, status,0, pclath, cstack
   433 ;; Tracked objects:
   434 ;;		On entry : 0/0
   435 ;;		On exit  : 0/0
   436 ;;		Unchanged: 0/0
   437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   438 ;;      Params:         0       0       0       0       0
   439 ;;      Locals:         0       0       0       0       0
   440 ;;      Temps:          0       0       0       0       0
   441 ;;      Totals:         0       0       0       0       0
   442 ;;Total ram usage:        0 bytes
   443 ;; Hardware stack levels used: 1
   444 ;; Hardware stack levels required when called: 1
   445 ;; This function calls:
   446 ;;		_I2C_Wait
   447 ;; This function is called by:
   448 ;;		_main
   449 ;; This function uses a non-reentrant model
   450 ;;
   451                           
   452     077E                     _I2C_Stop:	
   453                           ;psect for function _I2C_Stop
   454                           
   455     077E                     l662:	
   456                           ;incstack = 0
   457                           ; Regs used in _I2C_Stop: [wreg+status,2+status,0+pclath+cstack]
   458                           
   459                           
   460                           ;main.c: 60:   I2C_Wait();
   461     077E  120A  118A  279E  120A  118A  	fcall	_I2C_Wait
   462     0783                     l664:
   463                           
   464                           ;main.c: 61:   SSPCON2bits.PEN = 1;
   465     0783  1683               	bsf	3,5	;RP0=1, select bank1
   466     0784  1303               	bcf	3,6	;RP1=0, select bank1
   467     0785  1511               	bsf	17,2	;volatile
   468     0786                     l63:
   469     0786  0008               	return
   470     0787                     __end_of_I2C_Stop:
   471                           
   472                           	psect	text3
   473     0775                     __ptext3:	
   474 ;; *************** function _I2C_Start *****************
   475 ;; Defined at:
   476 ;;		line 51 in file "main.c"
   477 ;; Parameters:    Size  Location     Type
   478 ;;		None
   479 ;; Auto vars:     Size  Location     Type
   480 ;;		None
   481 ;; Return value:  Size  Location     Type
   482 ;;                  1    wreg      void 
   483 ;; Registers used:
   484 ;;		wreg, status,2, status,0, pclath, cstack
   485 ;; Tracked objects:
   486 ;;		On entry : 0/0
   487 ;;		On exit  : 0/0
   488 ;;		Unchanged: 0/0
   489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   490 ;;      Params:         0       0       0       0       0
   491 ;;      Locals:         0       0       0       0       0
   492 ;;      Temps:          0       0       0       0       0
   493 ;;      Totals:         0       0       0       0       0
   494 ;;Total ram usage:        0 bytes
   495 ;; Hardware stack levels used: 1
   496 ;; Hardware stack levels required when called: 1
   497 ;; This function calls:
   498 ;;		_I2C_Wait
   499 ;; This function is called by:
   500 ;;		_main
   501 ;; This function uses a non-reentrant model
   502 ;;
   503                           
   504     0775                     _I2C_Start:	
   505                           ;psect for function _I2C_Start
   506                           
   507     0775                     l642:	
   508                           ;incstack = 0
   509                           ; Regs used in _I2C_Start: [wreg+status,2+status,0+pclath+cstack]
   510                           
   511                           
   512                           ;main.c: 54:   I2C_Wait();
   513     0775  120A  118A  279E  120A  118A  	fcall	_I2C_Wait
   514     077A                     l644:
   515                           
   516                           ;main.c: 55:   SSPCON2bits.SEN = 1;
   517     077A  1683               	bsf	3,5	;RP0=1, select bank1
   518     077B  1303               	bcf	3,6	;RP1=0, select bank1
   519     077C  1411               	bsf	17,0	;volatile
   520     077D                     l60:
   521     077D  0008               	return
   522     077E                     __end_of_I2C_Start:
   523                           
   524                           	psect	text4
   525     07AB                     __ptext4:	
   526 ;; *************** function _I2C_Read *****************
   527 ;; Defined at:
   528 ;;		line 92 in file "main.c"
   529 ;; Parameters:    Size  Location     Type
   530 ;;		None
   531 ;; Auto vars:     Size  Location     Type
   532 ;;  Data            1    0[COMMON] unsigned char 
   533 ;; Return value:  Size  Location     Type
   534 ;;                  1    wreg      unsigned char 
   535 ;; Registers used:
   536 ;;		wreg, status,2, status,0, pclath, cstack
   537 ;; Tracked objects:
   538 ;;		On entry : 0/0
   539 ;;		On exit  : 0/0
   540 ;;		Unchanged: 0/0
   541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   542 ;;      Params:         0       0       0       0       0
   543 ;;      Locals:         1       0       0       0       0
   544 ;;      Temps:          0       0       0       0       0
   545 ;;      Totals:         1       0       0       0       0
   546 ;;Total ram usage:        1 bytes
   547 ;; Hardware stack levels used: 1
   548 ;; Hardware stack levels required when called: 2
   549 ;; This function calls:
   550 ;;		_I2C_NACK
   551 ;;		_I2C_Wait
   552 ;; This function is called by:
   553 ;;		_main
   554 ;; This function uses a non-reentrant model
   555 ;;
   556                           
   557     07AB                     _I2C_Read:	
   558                           ;psect for function _I2C_Read
   559                           
   560     07AB                     l652:	
   561                           ;incstack = 0
   562                           ; Regs used in _I2C_Read: [wreg+status,2+status,0+pclath+cstack]
   563                           
   564                           
   565                           ;main.c: 94:   unsigned char Data;;main.c: 95:   I2C_Wait();
   566     07AB  120A  118A  279E  120A  118A  	fcall	_I2C_Wait
   567     07B0                     l654:
   568                           
   569                           ;main.c: 96:   SSPCON2bits.RCEN = 1;
   570     07B0  1683               	bsf	3,5	;RP0=1, select bank1
   571     07B1  1303               	bcf	3,6	;RP1=0, select bank1
   572     07B2  1591               	bsf	17,3	;volatile
   573                           
   574                           ;main.c: 97:   I2C_Wait();
   575     07B3  120A  118A  279E  120A  118A  	fcall	_I2C_Wait
   576     07B8                     l656:
   577                           
   578                           ;main.c: 98:   Data = SSPBUF;
   579     07B8  1283               	bcf	3,5	;RP0=0, select bank0
   580     07B9  1303               	bcf	3,6	;RP1=0, select bank0
   581     07BA  0813               	movf	19,w	;volatile
   582     07BB  00F0               	movwf	I2C_Read@Data
   583     07BC                     l658:
   584                           
   585                           ;main.c: 99:   I2C_NACK();
   586     07BC  120A  118A  2787  120A  118A  	fcall	_I2C_NACK
   587                           
   588                           ;main.c: 100:   return Data;
   589     07C1  0870               	movf	I2C_Read@Data,w
   590     07C2                     l78:
   591     07C2  0008               	return
   592     07C3                     __end_of_I2C_Read:
   593                           
   594                           	psect	text5
   595     0787                     __ptext5:	
   596 ;; *************** function _I2C_NACK *****************
   597 ;; Defined at:
   598 ;;		line 76 in file "main.c"
   599 ;; Parameters:    Size  Location     Type
   600 ;;		None
   601 ;; Auto vars:     Size  Location     Type
   602 ;;		None
   603 ;; Return value:  Size  Location     Type
   604 ;;                  1    wreg      void 
   605 ;; Registers used:
   606 ;;		wreg, status,2, status,0, pclath, cstack
   607 ;; Tracked objects:
   608 ;;		On entry : 0/0
   609 ;;		On exit  : 0/0
   610 ;;		Unchanged: 0/0
   611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   612 ;;      Params:         0       0       0       0       0
   613 ;;      Locals:         0       0       0       0       0
   614 ;;      Temps:          0       0       0       0       0
   615 ;;      Totals:         0       0       0       0       0
   616 ;;Total ram usage:        0 bytes
   617 ;; Hardware stack levels used: 1
   618 ;; Hardware stack levels required when called: 1
   619 ;; This function calls:
   620 ;;		_I2C_Wait
   621 ;; This function is called by:
   622 ;;		_I2C_Read
   623 ;; This function uses a non-reentrant model
   624 ;;
   625                           
   626     0787                     _I2C_NACK:	
   627                           ;psect for function _I2C_NACK
   628                           
   629     0787                     l626:	
   630                           ;incstack = 0
   631                           ; Regs used in _I2C_NACK: [wreg+status,2+status,0+pclath+cstack]
   632                           
   633                           
   634                           ;main.c: 79:   I2C_Wait();
   635     0787  120A  118A  279E  120A  118A  	fcall	_I2C_Wait
   636     078C                     l628:
   637                           
   638                           ;main.c: 80:   SSPCON2bits.ACKDT = 1;
   639     078C  1683               	bsf	3,5	;RP0=1, select bank1
   640     078D  1303               	bcf	3,6	;RP1=0, select bank1
   641     078E  1691               	bsf	17,5	;volatile
   642     078F                     l630:
   643                           
   644                           ;main.c: 81:   SSPCON2bits.ACKEN = 1;
   645     078F  1611               	bsf	17,4	;volatile
   646     0790                     l72:
   647     0790  0008               	return
   648     0791                     __end_of_I2C_NACK:
   649                           
   650                           	psect	text6
   651     079E                     __ptext6:	
   652 ;; *************** function _I2C_Wait *****************
   653 ;; Defined at:
   654 ;;		line 47 in file "main.c"
   655 ;; Parameters:    Size  Location     Type
   656 ;;		None
   657 ;; Auto vars:     Size  Location     Type
   658 ;;		None
   659 ;; Return value:  Size  Location     Type
   660 ;;                  1    wreg      void 
   661 ;; Registers used:
   662 ;;		wreg, status,2
   663 ;; Tracked objects:
   664 ;;		On entry : 0/0
   665 ;;		On exit  : 0/0
   666 ;;		Unchanged: 0/0
   667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   668 ;;      Params:         0       0       0       0       0
   669 ;;      Locals:         0       0       0       0       0
   670 ;;      Temps:          0       0       0       0       0
   671 ;;      Totals:         0       0       0       0       0
   672 ;;Total ram usage:        0 bytes
   673 ;; Hardware stack levels used: 1
   674 ;; This function calls:
   675 ;;		Nothing
   676 ;; This function is called by:
   677 ;;		_I2C_Start
   678 ;;		_I2C_Stop
   679 ;;		_I2C_NACK
   680 ;;		_I2C_Read
   681 ;;		_I2C_Restart
   682 ;;		_I2C_ACK
   683 ;; This function uses a non-reentrant model
   684 ;;
   685                           
   686     079E                     _I2C_Wait:	
   687                           ;psect for function _I2C_Wait
   688                           
   689     079E                     l622:	
   690                           ;incstack = 0
   691                           ; Regs used in _I2C_Wait: [wreg+status,2]
   692                           
   693     079E                     l54:	
   694                           ;main.c: 49:   while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
   695                           
   696     079E  1683               	bsf	3,5	;RP0=1, select bank1
   697     079F  1303               	bcf	3,6	;RP1=0, select bank1
   698     07A0  1914               	btfsc	20,2	;volatile
   699     07A1  2FA3               	goto	u11
   700     07A2  2FA4               	goto	u10
   701     07A3                     u11:
   702     07A3  2F9E               	goto	l54
   703     07A4                     u10:
   704     07A4                     l624:
   705     07A4  0811               	movf	17,w	;volatile
   706     07A5  391F               	andlw	31
   707     07A6  1D03               	btfss	3,2
   708     07A7  2FA9               	goto	u21
   709     07A8  2FAA               	goto	u20
   710     07A9                     u21:
   711     07A9  2F9E               	goto	l54
   712     07AA                     u20:
   713     07AA                     l57:
   714     07AA  0008               	return
   715     07AB                     __end_of_I2C_Wait:
   716                           
   717                           	psect	text7
   718     0791                     __ptext7:	
   719 ;; *************** function _I2C_Master_Init *****************
   720 ;; Defined at:
   721 ;;		line 38 in file "main.c"
   722 ;; Parameters:    Size  Location     Type
   723 ;;		None
   724 ;; Auto vars:     Size  Location     Type
   725 ;;		None
   726 ;; Return value:  Size  Location     Type
   727 ;;                  1    wreg      void 
   728 ;; Registers used:
   729 ;;		wreg, status,2
   730 ;; Tracked objects:
   731 ;;		On entry : 0/0
   732 ;;		On exit  : 0/0
   733 ;;		Unchanged: 0/0
   734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   735 ;;      Params:         0       0       0       0       0
   736 ;;      Locals:         0       0       0       0       0
   737 ;;      Temps:          0       0       0       0       0
   738 ;;      Totals:         0       0       0       0       0
   739 ;;Total ram usage:        0 bytes
   740 ;; Hardware stack levels used: 1
   741 ;; This function calls:
   742 ;;		Nothing
   743 ;; This function is called by:
   744 ;;		_main
   745 ;; This function uses a non-reentrant model
   746 ;;
   747                           
   748     0791                     _I2C_Master_Init:	
   749                           ;psect for function _I2C_Master_Init
   750                           
   751     0791                     l632:	
   752                           ;incstack = 0
   753                           ; Regs used in _I2C_Master_Init: [wreg+status,2]
   754                           
   755                           
   756                           ;main.c: 40:   SSPCON = 0x28;
   757     0791  3028               	movlw	40
   758     0792  1283               	bcf	3,5	;RP0=0, select bank0
   759     0793  1303               	bcf	3,6	;RP1=0, select bank0
   760     0794  0094               	movwf	20	;volatile
   761     0795                     l634:
   762                           
   763                           ;main.c: 41:   SSPCON2 = 0x00;
   764     0795  1683               	bsf	3,5	;RP0=1, select bank1
   765     0796  1303               	bcf	3,6	;RP1=0, select bank1
   766     0797  0191               	clrf	17	;volatile
   767     0798                     l636:
   768                           
   769                           ;main.c: 42:   SSPSTAT = 0x00;
   770     0798  0194               	clrf	20	;volatile
   771                           
   772                           ;main.c: 43:   SSPADD = ((4000000/4)/100000) - 1;
   773     0799  3009               	movlw	9
   774     079A  0093               	movwf	19	;volatile
   775     079B                     l638:
   776                           
   777                           ;main.c: 44:   TRISC3 = 1;
   778     079B  1587               	bsf	7,3	;volatile
   779     079C                     l640:
   780                           
   781                           ;main.c: 45:   TRISC4 = 1;
   782     079C  1607               	bsf	7,4	;volatile
   783     079D                     l51:
   784     079D  0008               	return
   785     079E                     __end_of_I2C_Master_Init:
   786     007E                     btemp	set	126	;btemp
   787     007E                     wtemp0	set	126
   788                           
   789                           	psect	config
   790                           
   791                           ;Config register CONFIG @ 0x2007
   792                           ;	Oscillator Selection bits
   793                           ;	FOSC = XT, XT oscillator
   794                           ;	Watchdog Timer Enable bit
   795                           ;	WDTE = OFF, WDT disabled
   796                           ;	Power-up Timer Enable bit
   797                           ;	PWRTE = ON, PWRT enabled
   798                           ;	Brown-out Reset Enable bit
   799                           ;	BOREN = ON, BOR enabled
   800                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   801                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   802                           ;	Data EEPROM Memory Code Protection bit
   803                           ;	CPD = OFF, Data EEPROM code protection off
   804                           ;	Flash Program Memory Write Enable bits
   805                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   806                           ;	In-Circuit Debugger Mode bit
   807                           ;	DEBUG = 0x1, unprogrammed default
   808                           ;	Flash Program Memory Code Protection bit
   809                           ;	CP = OFF, Code protection off
   810     2007                     	org	8199
   811     2007  3F71               	dw	16241

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4       4
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_I2C_Read
    _main->_I2C_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0      30
                                              1 COMMON     3     3      0
                    _I2C_Master_Init
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _I2C_Write                                            1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Stop                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Start                                            0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Read                                             1     1      0      15
                                              0 COMMON     1     1      0
                           _I2C_NACK
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_NACK                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Wait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
   _I2C_Read
     _I2C_NACK
       _I2C_Wait
     _I2C_Wait
   _I2C_Start
     _I2C_Wait
   _I2C_Stop
     _I2C_Wait
   _I2C_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      4       4       1       28.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sun May 26 11:16:52 2024

                     l51 079D                       l60 077D                       l54 079E  
                     l63 0786                       l72 0790                       l57 07AA  
                     l75 0774                       l78 07C2                       u10 07A4  
                     u11 07A3                       u20 07AA                       u21 07A9  
                     u37 07ED                      l622 079E                      l630 078F  
                    l640 079C                      l632 0791                      l624 07A4  
                    l634 0795                      l626 0787                      l642 0775  
                    l636 0798                      l628 078C                      l652 07AB  
                    l644 077A                      l638 079B                      l654 07B0  
                    l662 077E                      l646 0770                      l670 07CF  
                    l656 07B8                      l664 0783                      l648 0774  
                    l680 07F4                      l672 07D4                      l658 07BC  
                    l674 07DA                      l666 07C3                      l676 07E2  
                    l668 07CA                      l678 07E7                      _RD3 0043  
       __end_of_I2C_NACK 0791                     _main 07C3         __end_of_I2C_Read 07C3  
                   btemp 007E         __end_of_I2C_Wait 07AB         __end_of_I2C_Stop 0787  
                   start 0000         ?_I2C_Master_Init 0070                    ?_main 0070  
                  _PORTB 0006                    _PORTD 0008                    _TRISB 0086  
                  _TRISD 0088        __end_of_I2C_Start 077E        __end_of_I2C_Write 0775  
                  status 0003                    wtemp0 007E          __initialization 07FC  
           __end_of_main 07FC                   ??_main 0071                   _SSPADD 0093  
                 _TRISC3 043B                   _TRISC4 043C                   _SSPCON 0014  
                 _SSPBUF 0013                ?_I2C_NACK 0070                ?_I2C_Read 0070  
              ?_I2C_Wait 0070                ?_I2C_Stop 0070  __end_of__initialization 07FC  
         __pcstackCOMMON 0070               ??_I2C_NACK 0070               ??_I2C_Read 0070  
             ??_I2C_Wait 0070               ??_I2C_Stop 0070             I2C_Read@Data 0070  
             __pmaintext 07C3                  _ACKSTAT 048E                  _SSPCON2 0091  
                _SSPSTAT 0094                _I2C_Start 0775                _I2C_Write 076F  
                __ptext1 076F                  __ptext2 077E                  __ptext3 0775  
                __ptext4 07AB                  __ptext5 0787                  __ptext6 079E  
                __ptext7 0791     end_of_initialization 07FC               ?_I2C_Start 0070  
             ?_I2C_Write 0070      start_initialization 07FC        ??_I2C_Master_Init 0070  
            ??_I2C_Start 0070              ??_I2C_Write 0070                ___latbits 0002  
               _I2C_NACK 0787                 _I2C_Read 07AB                 _I2C_Wait 079E  
               _I2C_Stop 077E            I2C_Write@Data 0070          _I2C_Master_Init 0791  
__end_of_I2C_Master_Init 079E              _SSPCON2bits 0091  
